services:
  frontend:
    build:
      context: ./dessertify-frontend
      dockerfile: Dockerfile
      target: development
    command: ng serve --host 0.0.0.0
    env_file:
      - ./dessertify-frontend/.env
    ports:
      - '4200:4200'
    volumes:
      - ./dessertify-frontend:/usr/src/app
  auth:
    build:
      context: ./dessertify-backend/auth
      dockerfile: Dockerfile
      target: development
    command:  yarn start:dev
    env_file:
      - ./dessertify-backend/auth/.env
    ports:
      - '3001:3001'
    volumes:
      - ./dessertify-backend/auth:/usr/src/app
    depends_on:
      - rabbitmq
      - postgres
  payments:
    build:
      context: ./dessertify-backend/payments
      dockerfile: Dockerfile
      target: development
    command:  yarn start:dev
    env_file:
      - ./dessertify-backend/payments/.env
    ports:
      - '3002:3002'
    volumes:
      - ./dessertify-backend/payments:/usr/src/app
    depends_on:
      - rabbitmq
      - postgres
  postgres:
    image: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: user
      POSTGRES_MULTIPLE_DATABASES: dessertify_payments, dessertify_auth
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./initdb-scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d postgres"]
      interval: 2s
      timeout: 1s
      retries: 20
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - '5672:5672'
      - '15672:15672'
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
volumes:
  rabbitmq_data:
  postgres_data:
